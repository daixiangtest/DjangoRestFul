"""
Django settings for djangoRestFul project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

from django.core import files

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-56jyrac*8*3^kcpgb3m)onx5pddc%o+uq%f9np4w*o$3e6l01n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',  # Basic认证
        'rest_framework.authentication.SessionAuthentication',  # session认证
        'rest_framework_simplejwt.authentication.JWTAuthentication'  # 进行jwt token认证
    ),
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',  # 权限管理类
    # )
    # 配置权限对权限限流
    # 'DEFAULT_THROTTLE_RATES': {
    #     'user': '2/minute'
    # },
    # 配置过滤器选项
    'DEFAULT_FILTER_BACKENDS':
        (
            # 这个是指定使用django_filters中的过滤器来进行过滤
            'django_filters.rest_framework.DjangoFilterBackend',
            # 这个是指定使用DRF自带的排序过滤器来进行数据排序
            'rest_framework.filters.OrderingFilter'),
    # 全局分页配置
    # 'DEFAULT_PAGINATION_CLASS':
    #     'rest_framework.pagination.PageNumberPagination',
    #     'PAGE_SIZE': 3  # 每页数据量
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 注册drf框架
    'rest_framework',
    # 注册app1应用
    'app1',
    # 注册django的过滤器
    'django_filters',
    # 配置跨域访问
    'corsheaders',
    # 注册twk资质应用
    'rest_framework_simplejwt',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoRestFul.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoRestFul.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        # 选择数据驱动
        'ENGINE': 'django.db.backends.mysql',
        # 指定数据库的库名
        'NAME': 'drf',
        # 数据库的用户
        'USER': 'root',
        # 端口号
        'PORT': 3306,
        # 登录密码
        'PASSWORD': 'Dx3826729123',
        # 主机ip
        'HOST': '115.120.244.181'

    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# 配置上传的文件保存路径
MEDIA_ROOT = BASE_DIR / 'files/image'
MEDIA_URL = "image/"

# # CORS
# # 凡是出现在白名单中的域名，都可以访问后端接口
# CORS_ORIGIN_WHITELIST = (
# 'http://127.0.0.1:8848',
# 'http://localhost:8080',
# )
# 允许所有用户跨域访问
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOW_CREDENTIALS 指明在跨域访问中，后端是否支持对cookie的操作。
CORS_ALLOW_CREDENTIALS = True

from datetime import timedelta

SIMPLE_JWT = {"ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),  # 访问令牌的有效时间
              "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # 刷新令牌的有效时间
              "ROTATE_REFRESH_TOKENS": False,  # 若为True，则刷新后新的refresh_token有更新的有效时间
              "BLACKLIST_AFTER_ROTATION": True,  # 若为True，刷新后的token将添加到黑名单中,
              "ALGORITHM": "HS256",  # 对称算法：HS256 HS384 HS512 非对称算法：RSA
              "SIGNING_KEY": SECRET_KEY,
              "VERIFYING_KEY": None,  # if signing_key, verifying_key will be ignore.
              "AUDIENCE": None,
              "ISSUER": None,
              'USER_AUTHENTICATION_RULE':
                  'rest_framework_simplejwt.authentication.default_user_authentication_rule',
              "AUTH_HEADER_TYPES": ("Bearer",),  # Authorization: Bearer <token>
              "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # if HTTP_X_ACCESS_TOKEN,X_ACCESS_TOKEN: Bearer <token>
              "USER_ID_FIELD": "id",  # 使用唯一不变的数据库字段,将包含在生成的令牌中以标识用户
              "USER_ID_CLAIM": "user_id",
              }
